<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- ExecNupkgDeterministicator
  <Summary>
    | Inputs                | Values/Types                | Default                     | Usage |
    | - - - - - - - - - - - | - - - - - - - - - - - - - - | - - - - - - - - - - - - - - | - - - - - - |
    | Deterministic         | `'true'`/`'false'`/`''`     | `'true'`                    | If true, run NupkgDeterministicator on the nupkg and snupkg (if applicable) |
    | PackageOutputPath     | string                      | `'$(OutputPath)'`           | The directory in which the package was created |
    | PackageId             | string                      | `'$(AssemblyName)'`         | Used to identify the nupkg and symbols package |
    | PackageVersion        | string                      | `'$(Version)'`              | Used to identify the nupkg and symbols package |
    | IncludeSymbols        | `'true'`/`'false'`/`''`     | `''` (falsey)               | If true, deterministicate the symbols package |
    | SymbolPackageFormat   | `'symbols.nupkg'`/`'snupkg'`| `'symbols.nupkg'` (legacy)  | Used to identify the symbols package |
  </Summary>
  TODO: contribute 'Kuinox.NupkgDeterministicator.MSBuild' and deprecate this target. https://github.com/Kuinox/NupkgDeterministicator
  https://stackoverflow.com/a/16804205/14894786

  The first "finished" version of this file is located at https://gist.github.com/BinToss/5776bf9efd962e8885f4427c72498480
   -->
  <Target Condition="'$(Deterministic)' == 'true'" Name="ExecNupkgDeterministicator" AfterTargets="Pack">
    <PropertyGroup>
      <_PackageFullPathNoExt>$(PackageOutputPath)\$(PackageId).$(PackageVersion)</_PackageFullPathNoExt>
      <_PackageOutputPathIsFullyQualified>$([System.IO.Path]::IsPathFullyQualified("$(PackageOutputPath)"))</_PackageOutputPathIsFullyQualified>
      <_PackageFullPathNoExt Condition=" '$(_PackageOutputPathIsFullyQualified)' != 'true' ">$(MSBuildProjectDirectory)\$(PackageOutputPath)\$(PackageId).$(PackageVersion)</_PackageFullPathNoExt>
      <_PackageFullPath>$(_PackageFullPathNoExt).nupkg</_PackageFullPath>
      <_PackageSymbolsFullPath Condition=" ('$(IncludeSymbols)' == 'true')">$(_PackageFullPathNoExt).$(SymbolPackageFormat)</_PackageSymbolsFullPath>
      <_ToolListLocalExitCode>0</_ToolListLocalExitCode>
      <_ToolListGlobalExitCode>0</_ToolListGlobalExitCode>
      <!-- <PATH Condition=" '$(CI)' == 'true' AND '$(OS)' == 'Unix'">/usr/share/dotnet:$(PATH)</PATH> -->
      <_PATH_multiline Condition=" '$(OS)' == 'Unix' ">
        $(PATH.Replace(":", $([System.Environment]::NewLine)))
      </_PATH_multiline>
      <_PATH_multiline Condition=" '$(OS)' == 'Windows_NT' ">
        $(PATH.Replace(";", $([System.Environment]::NewLine)))
      </_PATH_multiline>
    </PropertyGroup>

    <Exec Command="dotnet --info" ConsoleToMSBuild="true" />

    <!-- Check if the tool is installed locally (i.e. added to './.config/dotnet-tools.json') -->
    <Exec
      Command="dotnet tool list kuinox.nupkgdeterministicator"
      StandardOutputImportance="low"
      ContinueOnError="true" >
      <Output TaskParameter="ExitCode" PropertyName="_ToolListLocalExitCode" />
    </Exec>
    <!-- Check if `dotnet tool` is unavailable. Yes, this is possible. It caused a week of panic. -->
    <!-- A. No .NET SDK could be found. Only .NET runtimes. -->
    <!-- B. The SDK version specified in global.json is unavailable. -->
    <Error Condition=" '$(_ToolListLocalExitCode)' == '145' " Text="
  `dotnet tool` subcommand is unavailable: .NET SDK not found.
  If this occurs on a GitHub Actions runner, this process's PATH may be missing the `actions/setup-dotnet` SDK path. On Ubuntu runners, this is `/usr/share/dotnet/`.
  Alternatively, this error could may the SDK version specified in the nearest global.json is unavailable.
  Current PATH:
  $(_PATH_multiline)"
    />
    <!-- Error codes other than 0, 1, and 145 are unknown and cannot be handled. -->
    <Error Condition=" ('$(_ToolListLocalExitCode)' != '0') AND ('$(_ToolListLocalExitCode)' != '1')"
      Text="The Exec command 'dotnet tool list kuinox.nupkgdeterministicator' exited with the unrecognized code '$(_ToolListLocalExitCode)'."
    />

    <!-- If the tool is not installed locally, check if it's installed globally. -->
    <Exec Condition=" '$(_ToolListLocalExitCode)' == '1' "
      Command="dotnet tool list -g kuinox.nupkgdeterministicator"
      StandardOutputImportance="low"
      ContinueOnError="true"
      ConsoleToMsBuild="true" >
      <Output TaskParameter="ExitCode" PropertyName="_ToolListGlobalExitCode" />
    </Exec>
    <!-- Error codes other than 0 and 1 are unknown and cannot be handled. -->
    <Error Condition=" ('$(_ToolListGlobalExitCode)' != '0') AND ('$(_ToolListGlobalExitCode)' != '1')"
      Text="The Exec command 'dotnet tool list -g kuinox.nupkgdeterministicator' exited with the unrecognized code '$(_ToolListGlobalExitCode)'."
    />

    <PropertyGroup>
      <_missing>
Kuinox.NupkgDeterministicator is unavailable. Run ONE of the following commands and try again:
dotnet tool install -g Kuinox.NupkgDeterministicator
dotnet tool install --create-manifest-if-needed Kuinox.NupkgDeterministicator
      </_missing>
    </PropertyGroup>

    <!-- If NupkgDeterministicator not installed locally nor globally, Error -->
    <Error Condition=" '$(_ToolListLocalExitCode)' != '0' AND '$(_ToolListLocalExitCode)' != '0' "
      Text="$(_missing)" />

    <PropertyGroup>
      <_BaseCmd>NupkgDeterministicator</_BaseCmd>
      <_BaseCmd Condition=" '$(_ToolListLocalExitCode)' == '0' ">dotnet tool run $(_BaseCmd)</_BaseCmd>
    </PropertyGroup>

    <Exec Command="dotnet tool restore" />

    <!-- determinize the nupkg -->
    <Exec
      Command="$(_BaseCmd) $(_PackageFullPath)"
      ConsoleToMsBuild="true"
      IgnoreExitCode="true"
      StandardErrorImportance="Low"
      StandardOutputImportance="Low"
    ><Output
      TaskParameter="ConsoleOutput"
      ItemName="_ConsoleOutput" />
      <Output
      TaskParameter="ExitCode"
      PropertyName="_ExitCode" />
    </Exec>

    <Error Condition=" '$(_ExitCode)' != '0' AND '$(_ExitCode)' != '-532462766' "
      Code="$(_ExitCode)"
      Text="@(_ConsoleOutput, '\n')"
    />

    <!-- if success and exit code 0... -->
    <Message
      Condition=" '$(_ExitCode)' == '0' "
      Text="Determinized package '$(_PackageFullPath)'"
      Importance="High"
    />
    <!-- else if success and exit code -532462766 (System.IO.IOException: Source and destination path must be different.) -->
    <Message
      Condition=" '$(_ExitCode)' == '-532462766' "
      Text="Package up-to-date and deterministic ('$(_PackageFullPath)')"
      Importance="Normal"
    />

    <!-- determinize the snupkg -->
    <Exec
      Command="$(_BaseCmd) $(_PackageSymbolsFullPath)"
      Condition=" '$(IncludeSymbols)' == 'true' "
      ConsoleToMsBuild="true"
      IgnoreExitCode="true"
      StandardErrorImportance="Low"
      StandardOutputImportance="Low"
    ><Output
      TaskParameter="ConsoleOutput"
      ItemName="ConsoleOutput" />
      <Output
      TaskParameter="ExitCode"
      ItemName="ExitCode" />
    </Exec>

    <Error Condition=" '$(_ExitCode)' != '0' AND '$(_ExitCode)' != '-532462766' "
      Code="$(_ExitCode)"
      Text="@(_ConsoleOutput, '\n')"
    />

    <!-- if success and exit code 0... -->
    <Message Condition=" '$(IncludeSymbols)' == 'true' AND '$(_ExitCode)' == '0' "
      Text="Determinized package '$(_PackageSymbolsFullPath)'"
      Importance="High"
    />
    <!-- else if success and exit code -532462766 (System.IO.IOException: Source and destination path must be different.) -->
    <Message
      Condition=" '$(IncludeSymbols)' == 'true' AND '$(_ExitCode)' == '-532462766' "
      Text="Package up-to-date and deterministic ('$(_PackageSymbolsFullPath)')"
      Importance="Normal"
    />
  </Target>
</Project>